# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
      
      # Generate dynamic Jekyll config based on repository owner to set the correct URL and baseurl for the site.
      # This is important for ensuring that the site works correctly when deployed to GitHub Pages.
      # The dynamic config file is created at docs/_config_dynamic.yml and will be merged with the 
      # existing _config.yml during the build process.
  
      - name: Generate dynamic Jekyll config
        run: |
          if [ "${{ github.repository_owner }}" = "rongtingting" ]; then
            echo "url: https://rongtingting.github.io" > docs/_config_dynamic.yml
            echo "baseurl: /IN-DEPTH" >> docs/_config_dynamic.yml
          else
            echo "url: https://${{ github.repository_owner }}.github.io" > docs/_config_dynamic.yml
            echo "baseurl: /IN-DEPTH" >> docs/_config_dynamic.yml
          fi

          echo "=== Dynamic config docs/_config_dynamic.yml ==="
          cat docs/_config_dynamic.yml

      - name: Install dependencies and build
        working-directory: ./docs
        run: |
          bundle install
          bundle exec jekyll build --trace --verbose -d ../_site
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4



